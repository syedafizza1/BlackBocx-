[0m[[0m[0mdebug[0m] [0m[0m> Exec(testOnly practice.SRamTests, Some(3443a45e-84e5-4d20-a6d4-251b8e581389), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / testOnly[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"24","parents":[]},"eventTime":1633249856543,"message":"Compiling root","dataKind":"compile-task","data":{"target":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/SRam.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"diagnostics":[{"range":{"start":{"line":26,"character":6},"end":{"line":26,"character":7}},"severity":2,"source":"sbt","message":"Generated class practice.SRam differs only in case from practice.sram.\n  Such classes will overwrite one another on case-insensitive filesystems."}],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/And.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/gcd/GCD.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/Alu.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"diagnostics":[{"range":{"start":{"line":26,"character":6},"end":{"line":26,"character":7}},"severity":2,"source":"sbt","message":"Generated class practice.Alu differs only in case from practice.alu.\n  Such classes will overwrite one another on case-insensitive filesystems."}],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/Counter.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"diagnostics":[{"range":{"start":{"line":22,"character":6},"end":{"line":22,"character":7}},"severity":2,"source":"sbt","message":"Generated class practice.Counter differs only in case from practice.counter.\n  Such classes will overwrite one another on case-insensitive filesystems."}],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/Or.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/gcd/DecoupledGCD.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/Adder.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"diagnostics":[{"range":{"start":{"line":19,"character":6},"end":{"line":19,"character":7}},"severity":2,"source":"sbt","message":"Generated class practice.Adder differs only in case from practice.adder.\n  Such classes will overwrite one another on case-insensitive filesystems."}],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/Mux2.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"diagnostics":[{"range":{"start":{"line":25,"character":6},"end":{"line":25,"character":7}},"severity":2,"source":"sbt","message":"Generated class practice.Mux2 differs only in case from practice.mux2.\n  Such classes will overwrite one another on case-insensitive filesystems."}],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"24","parents":[]},"eventTime":1633249856571,"message":"Compiled root","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/home/fizza/BlackBocx-/#root/Compile"},"errors":0,"warnings":5,"time":28}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"25","parents":[]},"eventTime":1633249856578,"message":"Compiling root-test","dataKind":"compile-task","data":{"target":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/SRamTests.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/AdderTests.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/OrTests.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/AluTests.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/CounterTests.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/AndTests.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/Mux2Tests.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/gcd/GCDSpec.scala"},"buildTarget":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"25","parents":[]},"eventTime":1633249856596,"message":"Compiled root-test","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/home/fizza/BlackBocx-/#root/Test"},"errors":0,"warnings":0,"time":18}})[0m
[0m[[0m[0minfo[0m] [0m[0m[32mSRamTests:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- sram *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  java.lang.AssertionError: assertion failed: verilator command failed on circuit SRam in work dir test_run_dir/sram[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.Predef$.assert(Predef.scala:223)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at chisel3.assert$.apply(Assert.scala:70)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at chiseltest.legacy.backends.verilator.VerilatorExecutive$.start(VerilatorExecutive.scala:111)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at chiseltest.defaults.package$.createDefaultTester(defaults.scala:24)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at chiseltest.ChiselScalatestTester$TestBuilder.apply(ChiselScalatestTester.scala:33)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at practice.SRamTests.$anonfun$new$1(SRamTests.scala:18)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[32mSRamTests:\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m- sram *** FAILED ***\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  java.lang.AssertionError: assertion failed: verilator command failed on circuit SRam in work dir test_run_dir/sram\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at scala.Predef$.assert(Predef.scala:223)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at chisel3.assert$.apply(Assert.scala:70)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at chiseltest.legacy.backends.verilator.VerilatorExecutive$.start(VerilatorExecutive.scala:111)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at chiseltest.defaults.package$.createDefaultTester(defaults.scala:24)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at chiseltest.ChiselScalatestTester$TestBuilder.apply(ChiselScalatestTester.scala:33)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at practice.SRamTests.$anonfun$new$1(SRamTests.scala:18)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[31m  ...\u001b[0m"})[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 2 seconds, 596 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 1, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 0, failed 1, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m*** 1 TEST FAILED ***[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[36mRun completed in 2 seconds, 596 milliseconds.\u001b[0m\n\u001b[36mTotal number of tests run: 1\u001b[0m\n\u001b[36mSuites: completed 1, aborted 0\u001b[0m\n\u001b[36mTests: succeeded 0, failed 1, canceled 0, ignored 0, pending 0\u001b[0m\n\u001b[31m*** 1 TEST FAILED ***\u001b[0m"})[0m
[0m[[0m[31merror[0m] [0m[0mFailed tests:[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"Failed tests:"})[0m
[0m[[0m[31merror[0m] [0m[0m	practice.SRamTests[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"\tpractice.SRamTests"})[0m
[0m[[0m[31merror[0m] [0m[0m(Test / [31mtestOnly[0m) sbt.TestsFailedException: Tests unsuccessful[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"(Test / \u001b[31mtestOnly\u001b[0m) sbt.TestsFailedException: Tests unsuccessful"})[0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 3 s, completed Oct 3, 2021 1:30:59 PM[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/Counter.scala","languageId":"scala","version":1,"text":"//module up_counter(input clk, reset, output[3:0] counter\n\npackage practice\n\nimport chisel3._\nimport chisel3.util._\nimport chisel3.experimental._\n\nclass IOd extends Bundle{\n    val clk = Input(Bool())\n    val reset = Input(Bool())\n    val counter = Output(UInt(4.W))\n    // clock    input(bool)\n    // reset    == = = = = \n}\n\nclass counter extends BlackBox with HasBlackBoxResource{\n    val io = IO(new IOd)\n    addResource(\"/counter.v\")\n    \n}\n\nclass Counter extends Module{\n\n    val io = IO(new Bundle{\n        val output = Output(UInt(4.W))\n\n    })\n\n    // val io = IO(new Bundle{\n    //     a\n    //     B\n    //     sum\n    // })\n    val a = Module(new counter)\n    val clk = WireInit(clock.asUInt()(0))\n    a.io.clk := ~clk\n    val rst = WireInit(reset.asUInt()(0))\n    a.io.reset := rst\n    io.output := a.io.counter\n   \n\n    //a.io <> io\n\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/SRamTests.scala","languageId":"scala","version":1,"text":"package practice\n\nimport chisel3._\nimport chisel3 . util._\nimport org.scalatest._\nimport chisel3.experimental._\nimport chiseltest._\nimport chisel3.experimental.BundleLiterals._\nimport chiseltest.experimental.TestOptionBuilder._\nimport chiseltest.internal.VerilatorBackendAnnotation\n// import org.scalatest.flatspec.AnyFlatSpec\n\n\n\nclass SRamTests extends FreeSpec with ChiselScalatestTester {\n\n  \"sram\" in {\n    test(new SRam()).withAnnotations(Seq(VerilatorBackendAnnotation)) { c =>\n        // c.io.A.poke(0.B)\n        // c.io.B.poke(1.B)\n        \n        // c.io.i_clk.poke(Clock().asInstanceOf[Bool])\n        \n        // c.io.clk.poke(clock.asUInt()(0).asClock())\n        // c.io.rst_n.poke(0.B)\n        // c.io.data_in.poke(8.U)\n        // c.io.start.poke(1.B)\n\n\n        c.clock.step(20)\n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/OrTests.scala","languageId":"scala","version":1,"text":"package practice\n\nimport chisel3._\nimport chisel3 . util._\nimport org.scalatest._\nimport chisel3.experimental._\nimport chiseltest._\nimport chisel3.experimental.BundleLiterals._\nimport chiseltest.experimental.TestOptionBuilder._\nimport chiseltest.internal.VerilatorBackendAnnotation\n// import org.scalatest.flatspec.AnyFlatSpec\n\n\n\nclass OrTests extends FreeSpec with ChiselScalatestTester {\n\n  \"OR GATE\" in {\n    test(new Or()).withAnnotations(Seq(VerilatorBackendAnnotation)) { c =>\n        c.io.A.poke(0.B)\n        c.io.B.poke(1.B)\n        \n        // c.io.i_clk.poke(Clock().asInstanceOf[Bool])\n        \n        // c.io.clk.poke(clock.asUInt()(0).asClock())\n        // c.io.rst_n.poke(0.B)\n        // c.io.data_in.poke(8.U)\n        // c.io.start.poke(1.B)\n\n\n        c.clock.step(20)\n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/Mux2Tests.scala","languageId":"scala","version":1,"text":"package practice\n\nimport chisel3._\nimport chisel3 . util._\nimport org.scalatest._\nimport chisel3.experimental._\nimport chiseltest._\nimport chisel3.experimental.BundleLiterals._\nimport chiseltest.experimental.TestOptionBuilder._\nimport chiseltest.internal.VerilatorBackendAnnotation\n// import org.scalatest.flatspec.AnyFlatSpec\n\n\n\nclass Mux2Tests extends FreeSpec with ChiselScalatestTester {\n\n  \"Multiplexer 2-BIT\" in {\n    test(new Mux2()).withAnnotations(Seq(VerilatorBackendAnnotation)) { c =>\n        c.io.D0.poke(1.B)\n        c.io.D1.poke(0.B)\n        c.io.S.poke(1.B)\n        c.clock.step(20)\n    \n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/Adder.scala","languageId":"scala","version":1,"text":"package practice\n\nimport chisel3._\nimport chisel3.util._\nimport chisel3.experimental._\n\nclass IO extends Bundle{\n    val a = Input(UInt(4.W))\n    val b = Input(UInt(4.W))\n    val sum = Output(UInt(4.W))\n    // clock    input(bool)\n    // reset    == = = = = \n}\n\nclass adder extends BlackBox with HasBlackBoxResource{\n    val io = IO(new IO)\n    addResource(\"/adder.v\")\n}\n\nclass Adder extends Module{\n\n    val io = IO(new IO)\n\n    // val io = IO(new Bundle{\n    //     a\n    //     B\n    //     sum\n    // })\n    // val clk = WireInit(clock.asUInt()(0))\n    // a.io.clock := ~clk\n\n    val a = Module(new adder)\n\n    a.io <> io\n\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/And.scala","languageId":"scala","version":1,"text":"package practice\n\nimport chisel3._\nimport chisel3.util._\nimport chisel3.experimental._\n\nclass IOs extends Bundle{\n    val A = Input(Bool())\n    val B = Input(Bool())\n    val Y = Output(Bool())\n    // clock    input(bool)\n    // reset    == = = = = \n}\n\nclass andGate extends BlackBox with HasBlackBoxResource{\n    val io = IO(new IOs)\n    addResource(\"/andGate.v\")\n}\n\nclass And extends Module{\n\n    val io = IO(new IOs)\n\n    // val io = IO(new Bundle{\n    //     a\n    //     B\n    //     sum\n    // })\n    // val clk = WireInit(clock.asUInt()(0))\n    // a.io.clock := ~clk\n\n    val a = Module(new andGate)\n\n    a.io <> io\n\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/Mux2.scala","languageId":"scala","version":1,"text":"// output Y;\n// input D0, D1, S;\n// wire T1, T2, Sbar;\n\n//module up_counter(input clk, reset, output[3:0] counter\n\npackage practice\n\nimport chisel3._\nimport chisel3.util._\nimport chisel3.experimental._\n\nclass IOm extends Bundle{\n    val D0 = Input(Bool())\n    val D1 = Input(Bool())\n    val S = Input(Bool())\n    val Y = Output(Bool())\n}\n\nclass mux2 extends BlackBox with HasBlackBoxResource{\n    val io = IO(new IOm)\n    addResource(\"/mux2.v\")\n    \n}\n\nclass Mux2 extends Module{\n    val io = IO(new IOm)\n    val a = Module(new mux2)\n\n    a.io <> io\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/SRam.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/mw.scala","languageId":"scala","version":1,"text":"package practice\n\nimport chisel3._\nimport chisel3.util._\nimport chisel3.experimental._\n\nclass IOm extends Bundle{\n    val clk0=Input(Bool())\n    val csb0=Input(Bool())\n    val web0=Input(Bool())\n    val addr0=Input(UInt(7.W))\n    val din0=Input(UInt(32.W))\n    val dout0= Output(UInt(32.W))\n}\nclass sram_32_128_freepdk45 extends BlackBox with HasBlackBoxResource{\n    val io = IO(new IOm)\n    addResource(\"/sram_32_128_freepdk45.v\")\n}\n\nclass mw extends Module{\n\n    val io = IO(new Bundle{\n    \tval clk0=Input(Bool())\n\tval csb0=Input(Bool())\n\tval web0=Input(Bool())\n\tval addr0=Input(UInt(7.W))\n\tval din0=Input(UInt(32.W))\n    \tval dout0 = Output(UInt(32.W))\n    })\n    val a = Module(new sram_32_128_freepdk45)\n\n   \n    val clk = WireInit(clock.asUInt()(0))\n    a.io.clk0 := ~clk\n    a.io.csb0:= io.csb0\n    a.io.web0:=io.web0\n    a.io.addr0:=io.addr0\n    a.io.din0:=io.din0\n    io.dout0 := a.io.dout0\n\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/SRamTests.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/mwTests.scala","languageId":"scala","version":1,"text":"package practice\n\nimport chisel3._\nimport chisel3 . util._\nimport org.scalatest._\nimport chisel3.experimental._\nimport chiseltest._\nimport chisel3.experimental.BundleLiterals._\nimport chiseltest.experimental.TestOptionBuilder._\nimport chiseltest.internal.VerilatorBackendAnnotation\n// import org.scalatest.flatspec.AnyFlatSpec\n\n\n\nclass mwTests extends FreeSpec with ChiselScalatestTester {\n\n  \"mw\" in {\n    test(new mw()).withAnnotations(Seq(VerilatorBackendAnnotation)) { c =>\n       // c.io.csb0.poke(0.B)\n        //c.io.web0.poke(0.B)\n        //c.io.addr0.poke(3.U)\n        //c.io.din0.poke(2.U)\n        \n        // c.io.clk.poke(clock.asUInt()(0).asClock())\n        // c.io.rst_n.poke(0.B)\n        // c.io.data_in.poke(8.U)\n        // c.io.start.poke(1.B)\n\n\n        c.clock.step(20)\n    }\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/Mux2.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/Mux2Tests.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/mw.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/main/scala/practice/SRam.scala","languageId":"scala","version":185,"text":"package practice\n\nimport chisel3._\nimport chisel3.util._\nimport chisel3.experimental._\n\nclass IOm extends Bundle{\n    val clk0=Input(Bool())\n    val csb0=Input(Bool())\n    val web0=Input(Bool())\n    val addr0=Input(UInt(7.W))\n    val din0=Input(UInt(32.W))\n    val dout0= Output(UInt(32.W))\n}\nclass sram_32_128_freepdk45 extends BlackBox with HasBlackBoxResource{\n    val io = IO(new IOm)\n    addResource(\"/sram_32_128_freepdk45.v\")\n}\n\nclass mw extends Module{\n\n    val io = IO(new Bundle{\n    \tval clk0=Input(Bool())\n\tval csb0=Input(Bool())\n\tval web0=Input(Bool())\n\tval addr0=Input(UInt(7.W))\n\tval din0=Input(UInt(32.W))\n    \tval dout0 = Output(UInt(32.W))\n    })\n    val a = Module(new sram_32_128_freepdk45)\n\n   \n    val clk = WireInit(clock.asUInt()(0))\n    a.io.clk0 := ~clk\n    a.io.csb0:= io.csb0\n    a.io.web0:=io.web0\n    a.io.addr0:=io.addr0\n    a.io.din0:=io.din0\n    io.dout0 := a.io.dout0\n\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/mwTests.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/SRamTests.scala","languageId":"scala","version":2,"text":"package practice\n\nimport chisel3._\nimport chisel3 . util._\nimport org.scalatest._\nimport chisel3.experimental._\nimport chiseltest._\nimport chisel3.experimental.BundleLiterals._\nimport chiseltest.experimental.TestOptionBuilder._\nimport chiseltest.internal.VerilatorBackendAnnotation\n// import org.scalatest.flatspec.AnyFlatSpec\n\n\n\nclass mwTests extends FreeSpec with ChiselScalatestTester {\n\n  \"mw\" in {\n    test(new mw()).withAnnotations(Seq(VerilatorBackendAnnotation)) { c =>\n       // c.io.csb0.poke(0.B)\n        //c.io.web0.poke(0.B)\n        //c.io.addr0.poke(3.U)\n        //c.io.din0.poke(2.U)\n        \n        // c.io.clk.poke(clock.asUInt()(0).asClock())\n        // c.io.rst_n.poke(0.B)\n        // c.io.data_in.poke(8.U)\n        // c.io.start.poke(1.B)\n\n\n        c.clock.step(20)\n    }\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/CounterTests.scala","languageId":"scala","version":1,"text":"package practice\n\nimport chisel3._\nimport chisel3 . util._\nimport org.scalatest._\nimport chisel3.experimental._\nimport chiseltest._\nimport chisel3.experimental.BundleLiterals._\nimport chiseltest.experimental.TestOptionBuilder._\nimport chiseltest.internal.VerilatorBackendAnnotation\n// import org.scalatest.flatspec.AnyFlatSpec\n\n\n\nclass CounterTests extends FreeSpec with ChiselScalatestTester {\n\n  \"COUNTER\" in {\n    test(new Counter()).withAnnotations(Seq(VerilatorBackendAnnotation)) { c =>\n        // c.io.A.poke(0.B)\n        // c.io.B.poke(1.B)\n        \n        // c.io.i_clk.poke(Clock().asInstanceOf[Bool])\n        \n        // c.io.clk.poke(clock.asUInt()(0).asClock())\n        // c.io.rst_n.poke(0.B)\n        // c.io.data_in.poke(8.U)\n        // c.io.start.poke(1.B)\n\n\n        c.clock.step(20)\n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/BlackBocx-/src/test/scala/practice/Mux2Tests.scala","languageId":"scala","version":1,"text":"package practice\n\nimport chisel3._\nimport chisel3 . util._\nimport org.scalatest._\nimport chisel3.experimental._\nimport chiseltest._\nimport chisel3.experimental.BundleLiterals._\nimport chiseltest.experimental.TestOptionBuilder._\nimport chiseltest.internal.VerilatorBackendAnnotation\n// import org.scalatest.flatspec.AnyFlatSpec\n\n\n\nclass Mux2Tests extends FreeSpec with ChiselScalatestTester {\n\n  \"Multiplexer 2-BIT\" in {\n    test(new Mux2()).withAnnotations(Seq(VerilatorBackendAnnotation)) { c =>\n        c.io.D0.poke(1.B)\n        c.io.D1.poke(0.B)\n        c.io.S.poke(1.B)\n        c.clock.step(20)\n    \n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨1, shutdown, null})[0m
